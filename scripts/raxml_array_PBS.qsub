#!/bin/bash
#PBS -S /bin/bash
#PBS -N raxml
#PBS -o /work/flassall/logs/mrbayes
#PBS -j oe 
#PBS -l walltime=24:00:00 
#PBS -l select=1:ncpus=4:mem=16gb

module -v load raxml
module -v load intel-suite
module list

# parse external variables pased through qsub -v "var1=toto,var2=tutu,..."
# mandatory variables
if [ -z $tasklist ] ; then
  echo "!!! ERROR : must provide a task list through 'tasklist' variable ; exit now"
  exit 1
fi
if [ -z $outputdir ] ; then
  echo "!!! ERROR : must provide a output directory path through 'outputdir' variable ; exit now"
  exit 1
fi
# options
if [ -z $model ] ; then
  model='GTRCAT'
fi
if [ -z $mainresulttag ] ; then
  #~ mainresulttag='bipartitions'
  mainresulttags=('bipartitions' 'rootedTree' 'identical_sequences')
else
  mainresulttags=($mainresulttag)
fi
if [ -z $bootstrapalgo ] ; then
  bootstrapalgo='x'
fi
if [ -z $nbthreads ] ; then
  nbthreads=4
fi
if [ -z $reducedaln ] ; then
  reducedaln=false
fi

for mainresulttag in bulk ${mainresulttags[@]} ; do
  mkdir -p $outputdir/$mainresulttag/
  if [ ! -d $outputdir/$mainresulttag ] ; then 
    echo "!!! ERROR : unable to access output directory 'outputdir/$mainresulttag/' ; exit now"
    exit 1
  fi
done
if [ ! -e $tasklist ] ; then 
  echo "!!! ERROR : unable to access task list file '$tasklist' ; exit now"
  exit 1
fi

nfaln=`awk "NR==$PBS_ARRAY_INDEX" $tasklist`
nfrad1=$(basename $nfaln)
nfext=${nfrad1##*.}
nfrad2=${nfrad1%.*}
echo $nfrad2


cd $TMPDIR/
echo "current directory is $PWD"

cp $nfaln $TMPDIR/
if [ $? != 0 ] ; then
  echo "!!! ERROR : unable to copied input file $nfaln into $TMPDIR/ ; exit now"
  exit 1
else
  echo "copied input files $nfaln succesfully"
fi
echo "ls ./"
ls ./

# convert file format
if [ "$nfext" == 'nex' ] ; then
  module load python
  python -c "from Bio import AlignIO ; AlignIO.convert('$nfrad1', 'nexus', '${nfrad2}.fasta', 'fasta')"
  if [ $? == 0 ] ; then
    echo "succesfully converted Nexus input file $nfrad1 into FASTA format: ${nfrad2}.fasta"
    localn=${nfrad2}.fasta
    cp $localn $outputdir/bulk/
  else
    echo "failed conversion of input file $nfrad1 into FASTA format; we'll see if it goes through..."
  fi
else
  localn=${nfrad1}
fi

# test presence of AVX/AVX2 instruction support
if [ ! -z $(grep -o avx2 /proc/cpuinfo | head -n 1) ] ; then
  raxmlflav='AVX2'
elif [ ! -z $(grep -o avx /proc/cpuinfo | head -n 1) ] ; then
  raxmlflav='AVX'
else
  raxmlflav='SSE3'
fi

raxmlbin="raxmlHPC-PTHREADS-$raxmlflav -T $nbthreads"

raxmloptions="-n $nfrad2 -m $model -p 1753"

idseqgreppat='exactly identical$'
idseqsedpat='s/IMPORTANT WARNING: Sequences \(.\+\) and \(.\+\) are exactly identical/\1\t\2/g'
if [[ "$reducedaln" == "true" ]] ; then
  ## reduce the alignement and record which sequences were seen as duplicates
  raxmlcall0="$raxmlbin -s $localn ${raxmloptions} -f c && grep '$idseqgreppat' RAxML_info.${nfrad2} | sed -e '$idseqsedpat' > RAxML_identical_sequences.${nfrad2}"
else
  raxmlcall0="# NOT reducing alignment to unique sequences before start"
  raxmlbin="$raxmlbin --silent"
fi
## search for global ML tree
raxmlcall1="$raxmlbin -s $localn $raxmloptions"
# search for {rapid|parametric} bootstrap trees
raxmlcall2="$raxmlbin -s $localn $raxmloptions -${bootstrapalgo} 987987 -N 100"
## map bootstraps on ML tree
raxmlcall3="$raxmlbin -s $localn $raxmloptions -f b -z RAxML_bootstrap.$nfrad2 -t RAxML_bestTree.$nfrad2"
## root ML tree
raxmlcall4="$raxmlbin -s $localn $raxmloptions -f I -t RAxML_bipartitionsBranchLabels.$nfrad2"
## generic end
raxmlcallz=""

### pipeline
raxmlcalls=(raxmlcall0 raxmlcall1 raxmlcall2 raxmlcall3 raxmlcall4 raxmlcallz)

status=$?
for i in {1..5} ; do
  let j=$i-1
  if [ $status != 0 ] ; then
    echo "!!! ERROR : during former RAxML call ; exit now"
    exit 1
  else  
    if [ -e "RAxML_info.$nfrad2" ] ; then 
      mv -f RAxML_info.$nfrad2 RAxML_info.$j.$nfrad2 
    fi
    eval raxmlcall='$'${raxmlcalls[$i]}
    echo ""
    echo "#####"
    echo $raxmlcall
    eval $raxmlcall
    status=$?
    if [ $i -eq 0 ] ; then
      ## change alignment to be further considered by RAxML as the reduced one: !!! the resulting tree will NOT contain any duplicates !!!
      if [[ -e ${localn}.reduced ]] ; then
        localn=${localn}.reduced
        echo "# Found $(wc -l RAxML_identical_sequences.${nfrad2} | cut -d':' -f2) redundant sequences; changed input alignment from '${localn}' to '${localn}.reduced'."
      fi
    fi
  fi
done
echo "output of RAxML phylogenetic reconstruction is :"
echo "ls ./*.$nfrad2*"
ls ./*.$nfrad2*

rsync -avz --exclude=$nfrad1 --exclude=RAxML_info* ./*$nfrad2 $outputdir/bulk/
if [ $? != 0 ] ; then
  echo "!!! ERROR : unable to copy RAxML_* output files from $HOSTNAME:$PWD ; exit now"
  exit 1
else
  echo "copied RAxML_* output files with exit status $?"
fi
echo ""
for mainresulttag in ${mainresulttags[@]} ; do
  echo "mv -f $outputdir/bulk/RAxML_${mainresulttag}.$nfrad2 $outputdir/$mainresulttag/"
  mv -f $outputdir/bulk/RAxML_${mainresulttag}.$nfrad2 $outputdir/$mainresulttag/
done
